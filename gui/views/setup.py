"""
Module for building the input form for electricity usage setup.
Allows users to manually enter key information such as tariff, region, breaker size,
estimated consumption, and monthly charge. After confirming the input, the data is
validated, enriched with additional pricing info, and stored for later calculation.
"""

from datetime import datetime
from dataclasses import dataclass
import flet as ft
from data.constants import CZECH_MONTHS_N, BREAKERS, RATES, REGIONS
from gui.components.button_group import BackButton, ContinueButton
from src.storage import load_data, save_data
from src.scraper import scrape_distributor, scrape_breaker
from src.utils import to_float
from src.errors import ValidationError, InternalError

# @generated (partially) ChatGPT 4o: dataclass FormInputs generated by tool, rest of the logic refactored manually
# Function prepare_calculate_data was split into smaller helpers for readability and PEP8 compliance

@dataclass
class FormInputs:
    """
    Container for user input components used in the electricity setup form.
    """
    tariff: ft.Dropdown
    region: ft.Dropdown
    rate: ft.Dropdown
    breaker: ft.Dropdown
    charge: ft.TextField
    kwh: ft.TextField
    month: ft.Dropdown

def get_distributor(region: str):
    """
    Returns the electricity distributor based on the provided Czech region.
    """
    if region in ["Jihočeský kraj", "Jihomoravský kraj", "Vysočina", "Zlínský kraj"]:
        return "EG.D"
    if region == "Praha":
        return "PREdistribuce"
    return "ČEZ Distribuce"

def get_high_percentage(tariff_code: str):
    """
    Returns an approximate percentage of electricity consumption that falls under the high tariff
    for a given Czech electricity tariff code.
    """
    high_tariff_map = {
        "D25d": 0.65,
        "D26d": 0.60,
        "D27d": 0.40,
        "D57d": 0.15,
        "D61d": 0.35,
    }
    return high_tariff_map.get(tariff_code, 1.0)

def validate_input(inputs: FormInputs):
    """
    Validates user input from the form controls.
    """
    tariff = inputs.tariff.value
    region = inputs.region.value
    rate = inputs.rate.value
    breaker = inputs.breaker.value
    charge = inputs.charge.value
    kwh_last = inputs.kwh.value
    start = inputs.month.value

    if not all([tariff, region, rate, breaker, charge, kwh_last, start]):
        raise ValidationError("⛔Některá pole nebyla vyplněna")
    if not charge.isdigit() and not kwh_last.isdigit():
        raise ValidationError("⛔Zadejte prosím platnou cenu ve formátu čísla")
    return tariff, region, rate, breaker, int(charge), int(kwh_last), start


def get_tariff(tariff, rate, region, breaker, data):
    """
    Extracts pricing and distribution information for the given tariff configuration.
    """
    for item in data:
        if item["tariff_name"] == tariff:
            energy_price_per_kwh = item["price_kwh"]
            fixed_supplier_fee = item["price_month"]
            break
    else:
        raise InternalError("⚠️No matching tariffs found")

    distributor = get_distributor(region)
    tariff_code = rate.split()[0]
    try:
        price_distributor = scrape_distributor(tariff_code, distributor)
        breaker_fee = scrape_breaker(tariff_code, distributor, breaker)
    except InternalError as exc:
        raise ValidationError("⛔Nepodařilo se načíst data. Zkontrolujte připojení k internetu") from exc
    return energy_price_per_kwh, fixed_supplier_fee, price_distributor, breaker_fee, tariff_code


def prepare_calculate_data(inputs: FormInputs, input_file: str="data/supplier_data.json"):
    """
    Builds a structured dictionary of validated and processed input data for calculation.
    """
    tariff, region, rate, breaker, charge, kwh_last, start = validate_input(inputs)
    data = load_data(input_file)
    energy_price_per_kwh, fixed_supplier_fee, price_distributor, breaker_fee, tariff_code = get_tariff(tariff, rate, region, breaker, data)

    high_tariff_ratio=get_high_percentage(tariff_code)
    current_month=datetime.now().month
    return {
        "energy_price_per_kwh": to_float(energy_price_per_kwh),
        "fixed_supplier_fee": to_float(fixed_supplier_fee),
        "distribution_high_tariff": to_float(price_distributor[0].split()[0]),
        "distribution_low_tariff": to_float(price_distributor[1].split()[0]),
        "high_tariff_ratio": high_tariff_ratio,
        "breaker_fee": to_float(breaker_fee),
        "user_monthly_charge": int(charge),
        "start": current_month,
        "end": int(start),
        "kwh_last": int(kwh_last)
    }


def distribut_view(page: ft.Page):
    """
    Builds the distributor input form page.
    Lets the user pick their region, tariff, breaker, and enter other data.
    After clicking 'Continue', saves the input and moves to the result page.
    """
    data=load_data("data/supplier_data.json")
    tariff_names = [item["tariff_name"] for item in data]

    tariff_dropdown = ft.Dropdown(
        options=[ft.dropdown.Option(name) for name in tariff_names],
        width=400
    )

    region_dropdown = ft.Dropdown(
        options=[ft.dropdown.Option(region) for region in REGIONS],
        width=400
    )

    rate_dropdown = ft.Dropdown(
        options=[ft.dropdown.Option(rate) for rate in RATES],
        width=400
    )

    breaker_dropdown=ft.Dropdown(
        options=[ft.dropdown.Option(breaker) for breaker in BREAKERS],
        width=400
    )

    end_dropdown = ft.Dropdown(
        options=[ft.dropdown.Option(text=label, key=value) for value, label in CZECH_MONTHS_N],
        width=400
    )

    charge_textfield = ft.TextField(width=400)
    kwh_textfield = ft.TextField(width=360)

    error_text = ft.Text("", color=ft.colors.RED)

    def on_confirm():
        """
        Handles the 'Continue' button click.
        Checks the input, saves the result, and navigates to the page.
        """
        try:
            inputs = FormInputs(
                tariff=tariff_dropdown,
                region=region_dropdown,
                rate=rate_dropdown,
                breaker=breaker_dropdown,
                charge=charge_textfield,
                kwh=kwh_textfield,
                month=end_dropdown
            )
            result = prepare_calculate_data(inputs)
            save_data(result, "data/calculate_data.json")
            page.go("/result")
        except ValidationError as e:
            error_text.value = str(e)
            page.update()

    return ft.View(
        route="/distributor",
        controls=[
            ft.Row(
                controls=[BackButton(page, route="/supplier-electricity")],
                alignment="start"
            ),
            ft.Text("📋Informace o spotřebě", size=30, weight="bold"),
            ft.Text("Tarif", size=20),
            tariff_dropdown,
            ft.Text("Kraj", size=20),
            region_dropdown,
            ft.Text("Distribuční sazba", size=20),
            rate_dropdown,
            ft.Text("Hodnota jističe", size=20),
            breaker_dropdown,
            ft.Text("Měsíční poplatek", size=20),
            charge_textfield,
            ft.Text("Měsíс posledního vyúčtování", size=20),
            end_dropdown,
            ft.Text("Spotřeba od posledního vyúčtování", size=20),
            ft.Row(
                controls=[
                    kwh_textfield,
                    ft.Text("kWH")
                ],
                alignment="center"
            ),
            ContinueButton(lambda e: on_confirm()),
            error_text
        ],
        horizontal_alignment="center",
        scroll="auto"
    )
